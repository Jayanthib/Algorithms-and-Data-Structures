About Extern and Static keywords
================================

Preface : The role of linker is combine multiple object files created by compiler and
          link it into one single object file. This involves two important tasks : symbol resolution and symbol relocation.

          Symbol resolution: Linkage refers to the visibility of symbols to the linker when processing files.
          External linkage : Symbol is visible to the linker from other files, i.e. it is “globally” visible.


How to establish external linkage?

"extern" keyword : we say to the linker that definition of the identifier can be in another file by using this keyword.

1. "extern" can be applied to function and variable declared in global scope only. All functions are extern by default.
    But, in order to make a global variable extern, we need to prepend the keyword explicitly.

2. When we use extern modifier with any variables it is only declaration i.e. memory is not allocated for these variable. Instead, it simply points to the global variable defined in the other file.

3. To define a variable i.e. allocate the memory for extern variables it is necessary to initialize the variables.

4. A particular extern variable can be declared many times but we can initialize at only one time.

5. Default initial value of extern integral type variable is zero.

“extern” keyword is used to extend the visibility of variables/functions().

How to establish internal linkage ?

Functions/variables with internal linkage can be used anywhere within the file they are defined in, but can not be referenced outside the file they exist in.

"static" keyword : This establishes internal linkage and restricts the visibility of the variable/function only to the file in which it is defined.
